<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mapper.StudentresultMapper" >
  <resultMap id="BaseResultMap" type="po.Studentresult" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="sid" property="sid" jdbcType="INTEGER" />
    <result column="resingle" property="resingle" jdbcType="INTEGER" />
    <result column="resmore" property="resmore" jdbcType="INTEGER" />
    <result column="restotal" property="restotal" jdbcType="INTEGER" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="examinationid" property="examinationid" jdbcType="INTEGER" />
    <result column="isPass" property="ispass" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, sid, resingle, resmore, restotal, createtime, examinationid, isPass
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="po.StudentresultExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from studentresult
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from studentresult
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from studentresult
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="po.StudentresultExample" >
    delete from studentresult
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="po.Studentresult" >
    insert into studentresult (id, sid, resingle, 
      resmore, restotal, createtime, 
      examinationid, isPass)
    values (#{id,jdbcType=INTEGER}, #{sid,jdbcType=INTEGER}, #{resingle,jdbcType=INTEGER}, 
      #{resmore,jdbcType=INTEGER}, #{restotal,jdbcType=INTEGER}, #{createtime,jdbcType=TIMESTAMP}, 
      #{examinationid,jdbcType=INTEGER}, #{ispass,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="po.Studentresult" >
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID()  
    </selectKey> 
    insert into studentresult
    <trim prefix="(" suffix=")" suffixOverrides="," >
      
      <if test="sid != null" >
        sid,
      </if>
      <if test="resingle != null" >
        resingle,
      </if>
      <if test="resmore != null" >
        resmore,
      </if>
      <if test="restotal != null" >
        restotal,
      </if>
      <if test="createtime != null" >
        createtime,
      </if>
      <if test="examinationid != null" >
        examinationid,
      </if>
      <if test="ispass != null" >
        isPass,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      
      <if test="sid != null" >
        #{sid,jdbcType=INTEGER},
      </if>
      <if test="resingle != null" >
        #{resingle,jdbcType=INTEGER},
      </if>
      <if test="resmore != null" >
        #{resmore,jdbcType=INTEGER},
      </if>
      <if test="restotal != null" >
        #{restotal,jdbcType=INTEGER},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="examinationid != null" >
        #{examinationid,jdbcType=INTEGER},
      </if>
      <if test="ispass != null" >
        #{ispass,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="po.StudentresultExample" resultType="java.lang.Integer" >
    select count(*) from studentresult
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update studentresult
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.sid != null" >
        sid = #{record.sid,jdbcType=INTEGER},
      </if>
      <if test="record.resingle != null" >
        resingle = #{record.resingle,jdbcType=INTEGER},
      </if>
      <if test="record.resmore != null" >
        resmore = #{record.resmore,jdbcType=INTEGER},
      </if>
      <if test="record.restotal != null" >
        restotal = #{record.restotal,jdbcType=INTEGER},
      </if>
      <if test="record.createtime != null" >
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.examinationid != null" >
        examinationid = #{record.examinationid,jdbcType=INTEGER},
      </if>
      <if test="record.ispass != null" >
        isPass = #{record.ispass,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update studentresult
    set id = #{record.id,jdbcType=INTEGER},
      sid = #{record.sid,jdbcType=INTEGER},
      resingle = #{record.resingle,jdbcType=INTEGER},
      resmore = #{record.resmore,jdbcType=INTEGER},
      restotal = #{record.restotal,jdbcType=INTEGER},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      examinationid = #{record.examinationid,jdbcType=INTEGER},
      isPass = #{record.ispass,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="po.Studentresult" >
    update studentresult
    <set >
      <if test="sid != null" >
        sid = #{sid,jdbcType=INTEGER},
      </if>
      <if test="resingle != null" >
        resingle = #{resingle,jdbcType=INTEGER},
      </if>
      <if test="resmore != null" >
        resmore = #{resmore,jdbcType=INTEGER},
      </if>
      <if test="restotal != null" >
        restotal = #{restotal,jdbcType=INTEGER},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="examinationid != null" >
        examinationid = #{examinationid,jdbcType=INTEGER},
      </if>
      <if test="ispass != null" >
        isPass = #{ispass,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="po.Studentresult" >
    update studentresult
    set sid = #{sid,jdbcType=INTEGER},
      resingle = #{resingle,jdbcType=INTEGER},
      resmore = #{resmore,jdbcType=INTEGER},
      restotal = #{restotal,jdbcType=INTEGER},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      examinationid = #{examinationid,jdbcType=INTEGER},
      isPass = #{ispass,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getResultList" parameterType="vo.QueryResultVo" resultType="vo.ResultListVo">
  	select sr.*,s.name as sname,s.profession,s.clazz,e.name as examname 
  	from managerstudent ms,studentresult sr,student s,examination e
  	where ms.mid = #{managerId} and ms.sid = sr.sid and sr.sid = s.id and sr.examinationid = e.id
  	<if test="rlv.profession!=null and rlv.profession!=''">
  		and s.profession=#{rlv.profession}
  	</if>
  	<if test="rlv.clazz!=null and rlv.clazz!=''">
  		and s.clazz=#{rlv.clazz}
  	</if>
  	  	<if test="rlv.sname!=null and rlv.sname!=''">
  		and s.name=#{rlv.sname}
  	</if>
  	  	<if test="rlv.examname!=null and rlv.examname!=''">
  		and e.name=#{rlv.examname}
  	</if>
  	<if test="rlv.ispass!=null and rlv.ispass!=''">
  		and sr.ispass=#{rlv.ispass}
  	</if>
  	<if test="rlv.order!=null and rlv.order!=''">
  		order by #{rlv.order}
  	</if>
  </select>
  <select id="getResultListByLimit" parameterType="vo.QueryResultVo" resultType="vo.ResultListVo">
  	select sr.*,s.name as sname,s.profession,s.clazz,e.name as examname 
  	from managerstudent ms,studentresult sr,student s,examination e
  	where ms.mid = #{managerId} and ms.sid = sr.sid and sr.sid = s.id and sr.examinationid = e.id
	<if test="rlv.profession!=null and rlv.profession!=''">
  		and s.profession like "%"#{rlv.profession}"%"
  	</if>
  	<if test="rlv.clazz!=null and rlv.clazz!=''">
  		and s.clazz=#{rlv.clazz}
  	</if>
  	  	<if test="rlv.sname!=null and rlv.sname!=''">
  		and s.name like "%"#{rlv.sname}"%"
  	</if>
  	  	<if test="rlv.examname!=null and rlv.examname!=''">
  		and e.name like "%"#{rlv.examname}"%"
  	</if>
  	<if test="rlv.ispass!=null and rlv.ispass!=''">
  		and sr.ispass=#{rlv.ispass}
  	</if>
  	<if test="rlv.order!=null and rlv.order!=''">
  		order by #{rlv.order}
  	</if>
  	limit #{pagination.startPage},#{pagination.rows}
  	
  </select>
  <select id="getProfessionList" parameterType="java.lang.Integer" resultType="java.lang.String">
  select distinct s.profession
  from managerstudent ms,student s
  where ms.mid=#{managerId} and ms.sid=s.id
  </select>
  <select id="getClazzList" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  select distinct s.clazz
  from managerstudent ms,student s
  where ms.mid=#{managerId} and ms.sid=s.id
  </select>
  <select id="getExamNameList"  resultType="java.lang.String">
  	select distinct name from examination
  </select>
  <select id="getStuResultList" parameterType="java.lang.Integer" resultType="vo.ResultListVo" >
  	select sr.*,s.name as sname,s.profession,s.clazz,e.name as examname 
  	from studentresult sr,student s,examination e
  	where sr.sid = #{studentId} and sr.sid = s.id and sr.examinationid = e.id
  </select>
  
</mapper>